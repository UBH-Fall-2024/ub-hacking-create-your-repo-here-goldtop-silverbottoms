import face_recognition
import numpy as np
import os

# Load the known face encoding from the saved file
known_face_encoding = np.load("known_face_encoding.npy")

# Parameters
num_images = 100  # Target number of test images to encode
min_encodings = 70  # Minimum number of encodings needed to proceed
test_dir = "test"  # Directory containing the test images
tolerance = 0.4  # Tolerance for compare_faces (lower for higher sensitivity)
distance_threshold = 0.4  # Custom threshold for face_distance (experiment with this value)

# List to store test face encodings
test_encodings_list = []

# Load and encode each test image in the "test" folder
for i in range(num_images):
    filename = os.path.join(test_dir, f"test_image_{i+1}.jpg")
    print(f"Processing {filename}")

    # Load the image
    image = face_recognition.load_image_file(filename)

    # Get the face encoding
    face_encodings = face_recognition.face_encodings(image)

    if face_encodings:
        test_encodings_list.append(face_encodings[0])
        print(f"Encoding for {filename} captured")
    else:
        print(f"No face detected in {filename}. Skipping this image.")

# Ensure we have enough encodings to proceed
if len(test_encodings_list) < min_encodings:
    print(f"Only {len(test_encodings_list)} encodings captured, which is below the minimum required of {min_encodings}. Try capturing more images.")
    exit()

# Average the test encodings to create a single robust encoding for comparison
test_face_encoding = np.mean(test_encodings_list, axis=0)
print("Test face encoding generated by averaging multiple images.")

# Compare the averaged test encoding to the known encoding using compare_faces with tolerance
match = face_recognition.compare_faces([known_face_encoding], test_face_encoding, tolerance=tolerance)

# Calculate the distance as well
face_distance = face_recognition.face_distance([known_face_encoding], test_face_encoding)[0]
print(f"Face distance: {face_distance}")

# Final decision based on both compare_faces and face_distance
if match[0] and face_distance < distance_threshold:
    print("Face recognized!")
else:
    print("Face not recognized.")
